// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: community.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunityClient is the client API for Community service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityClient interface {
	GetTop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TopCreation, error)
	GetBulletin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Bulletin, error)
	SearchUserByName(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchUserResponse, error)
	SearchCreationByName(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchCreationResponse, error)
	CreationAttitude(ctx context.Context, in *AttitudeCreation, opts ...grpc.CallOption) (*AttitudeResponse, error)
}

type communityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityClient(cc grpc.ClientConnInterface) CommunityClient {
	return &communityClient{cc}
}

func (c *communityClient) GetTop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TopCreation, error) {
	out := new(TopCreation)
	err := c.cc.Invoke(ctx, "/Community/GetTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetBulletin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Bulletin, error) {
	out := new(Bulletin)
	err := c.cc.Invoke(ctx, "/Community/GetBulletin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) SearchUserByName(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchUserResponse, error) {
	out := new(SearchUserResponse)
	err := c.cc.Invoke(ctx, "/Community/SearchUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) SearchCreationByName(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchCreationResponse, error) {
	out := new(SearchCreationResponse)
	err := c.cc.Invoke(ctx, "/Community/SearchCreationByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) CreationAttitude(ctx context.Context, in *AttitudeCreation, opts ...grpc.CallOption) (*AttitudeResponse, error) {
	out := new(AttitudeResponse)
	err := c.cc.Invoke(ctx, "/Community/CreationAttitude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServer is the server API for Community service.
// All implementations must embed UnimplementedCommunityServer
// for forward compatibility
type CommunityServer interface {
	GetTop(context.Context, *emptypb.Empty) (*TopCreation, error)
	GetBulletin(context.Context, *emptypb.Empty) (*Bulletin, error)
	SearchUserByName(context.Context, *SearchRequest) (*SearchUserResponse, error)
	SearchCreationByName(context.Context, *SearchRequest) (*SearchCreationResponse, error)
	CreationAttitude(context.Context, *AttitudeCreation) (*AttitudeResponse, error)
	mustEmbedUnimplementedCommunityServer()
}

// UnimplementedCommunityServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServer struct {
}

func (UnimplementedCommunityServer) GetTop(context.Context, *emptypb.Empty) (*TopCreation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTop not implemented")
}
func (UnimplementedCommunityServer) GetBulletin(context.Context, *emptypb.Empty) (*Bulletin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulletin not implemented")
}
func (UnimplementedCommunityServer) SearchUserByName(context.Context, *SearchRequest) (*SearchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByName not implemented")
}
func (UnimplementedCommunityServer) SearchCreationByName(context.Context, *SearchRequest) (*SearchCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCreationByName not implemented")
}
func (UnimplementedCommunityServer) CreationAttitude(context.Context, *AttitudeCreation) (*AttitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreationAttitude not implemented")
}
func (UnimplementedCommunityServer) mustEmbedUnimplementedCommunityServer() {}

// UnsafeCommunityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServer will
// result in compilation errors.
type UnsafeCommunityServer interface {
	mustEmbedUnimplementedCommunityServer()
}

func RegisterCommunityServer(s grpc.ServiceRegistrar, srv CommunityServer) {
	s.RegisterService(&Community_ServiceDesc, srv)
}

func _Community_GetTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetTop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetBulletin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetBulletin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/GetBulletin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetBulletin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_SearchUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).SearchUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/SearchUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).SearchUserByName(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_SearchCreationByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).SearchCreationByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/SearchCreationByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).SearchCreationByName(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_CreationAttitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttitudeCreation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).CreationAttitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Community/CreationAttitude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).CreationAttitude(ctx, req.(*AttitudeCreation))
	}
	return interceptor(ctx, in, info, handler)
}

// Community_ServiceDesc is the grpc.ServiceDesc for Community service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Community_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Community",
	HandlerType: (*CommunityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTop",
			Handler:    _Community_GetTop_Handler,
		},
		{
			MethodName: "GetBulletin",
			Handler:    _Community_GetBulletin_Handler,
		},
		{
			MethodName: "SearchUserByName",
			Handler:    _Community_SearchUserByName_Handler,
		},
		{
			MethodName: "SearchCreationByName",
			Handler:    _Community_SearchCreationByName_Handler,
		},
		{
			MethodName: "CreationAttitude",
			Handler:    _Community_CreationAttitude_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "community.proto",
}
