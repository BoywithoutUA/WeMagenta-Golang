// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompositionsManagerClient is the client API for CompositionsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompositionsManagerClient interface {
	AllList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*ListResponse, error)
	GetByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetByFor(ctx context.Context, in *ForRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetByTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type compositionsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewCompositionsManagerClient(cc grpc.ClientConnInterface) CompositionsManagerClient {
	return &compositionsManagerClient{cc}
}

func (c *compositionsManagerClient) AllList(ctx context.Context, in *PageInfo, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/CompositionsManager/AllList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionsManagerClient) GetByName(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/CompositionsManager/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionsManagerClient) GetByFor(ctx context.Context, in *ForRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/CompositionsManager/GetByFor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionsManagerClient) GetByTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/CompositionsManager/GetByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionsManagerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/CompositionsManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compositionsManagerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/CompositionsManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompositionsManagerServer is the server API for CompositionsManager service.
// All implementations must embed UnimplementedCompositionsManagerServer
// for forward compatibility
type CompositionsManagerServer interface {
	AllList(context.Context, *PageInfo) (*ListResponse, error)
	GetByName(context.Context, *NameRequest) (*ListResponse, error)
	GetByFor(context.Context, *ForRequest) (*ListResponse, error)
	GetByTime(context.Context, *TimeRequest) (*ListResponse, error)
	Create(context.Context, *CreateRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCompositionsManagerServer()
}

// UnimplementedCompositionsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedCompositionsManagerServer struct {
}

func (UnimplementedCompositionsManagerServer) AllList(context.Context, *PageInfo) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllList not implemented")
}
func (UnimplementedCompositionsManagerServer) GetByName(context.Context, *NameRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedCompositionsManagerServer) GetByFor(context.Context, *ForRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByFor not implemented")
}
func (UnimplementedCompositionsManagerServer) GetByTime(context.Context, *TimeRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByTime not implemented")
}
func (UnimplementedCompositionsManagerServer) Create(context.Context, *CreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCompositionsManagerServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCompositionsManagerServer) mustEmbedUnimplementedCompositionsManagerServer() {}

// UnsafeCompositionsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompositionsManagerServer will
// result in compilation errors.
type UnsafeCompositionsManagerServer interface {
	mustEmbedUnimplementedCompositionsManagerServer()
}

func RegisterCompositionsManagerServer(s grpc.ServiceRegistrar, srv CompositionsManagerServer) {
	s.RegisterService(&CompositionsManager_ServiceDesc, srv)
}

func _CompositionsManager_AllList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionsManagerServer).AllList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompositionsManager/AllList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionsManagerServer).AllList(ctx, req.(*PageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionsManager_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionsManagerServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompositionsManager/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionsManagerServer).GetByName(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionsManager_GetByFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionsManagerServer).GetByFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompositionsManager/GetByFor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionsManagerServer).GetByFor(ctx, req.(*ForRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionsManager_GetByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionsManagerServer).GetByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompositionsManager/GetByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionsManagerServer).GetByTime(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionsManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionsManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompositionsManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionsManagerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompositionsManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompositionsManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompositionsManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompositionsManagerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompositionsManager_ServiceDesc is the grpc.ServiceDesc for CompositionsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompositionsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompositionsManager",
	HandlerType: (*CompositionsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllList",
			Handler:    _CompositionsManager_AllList_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _CompositionsManager_GetByName_Handler,
		},
		{
			MethodName: "GetByFor",
			Handler:    _CompositionsManager_GetByFor_Handler,
		},
		{
			MethodName: "GetByTime",
			Handler:    _CompositionsManager_GetByTime_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CompositionsManager_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CompositionsManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "composition.proto",
}
